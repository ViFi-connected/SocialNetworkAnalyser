@page "/upload"
@using SocialNetworkAnalyser.Shared
@using Microsoft.AspNetCore.Components.Forms
@using SocialNetworkAnalyser.Shared.Interfaces
@using SocialNetworkAnalyser.Shared.Services
@inject NavigationManager Navigation
@inject IDatasetService DatasetService
@inject IDatasetRepository DatasetRepository
@inject IJSRuntime JSRuntime
@inject JobStateService JobStateService

<PageTitle>Upload</PageTitle>

<div class="container">
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Upload Dataset</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="datasetName" class="form-label">Dataset Name:</label>
                        <input type="text" id="datasetName" class="form-control" @bind="datasetName" placeholder="Enter dataset name" />
                    </div>

                    <div class="mb-3">
                        <label for="fileInput" class="form-label">Select File:</label>
                        <InputFile OnChange="OnFileSelected" @ref="inputFile" class="form-control" />
                    </div>

                    <button @onclick="OnUploadFile" class="btn btn-primary">Upload</button>

                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <div class="alert @validationMessageClass mt-2">@validationMessage</div>
                    }

                    @if (JobStateService.Uploading)
                    {
                        <div class="mt-3">
                            <Progress Indeterminate />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? datasetName;
    private IBrowserFile? selectedFile;
    private InputFile? inputFile;
    private string validationMessage = string.Empty;
    private string validationMessageClass = string.Empty;

    protected override void OnInitialized()
    {
        JobStateService.OnUploadingChanged += HandleUploadingStateChanged;
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null && selectedFile.ContentType != "text/plain")
        {
            validationMessage = "Please select a valid .txt file.";
            validationMessageClass = "alert-danger";
            selectedFile = null;
        }
        else
        {
            validationMessage = string.Empty;
            validationMessageClass = string.Empty;
        }
    }

    private async Task OnUploadFile()
    {
        if (string.IsNullOrWhiteSpace(datasetName))
        {
            validationMessage = "Please enter a dataset name.";
            validationMessageClass = "alert-danger";
            return;
        }

        // Check if the dataset name is unique
        if (await DatasetRepository.IsDatasetNameTakenAsync(datasetName))
        {
            validationMessage = "Dataset name already exists. Please choose a different name.";
            validationMessageClass = "alert-danger";
            return;
        }

        if (selectedFile == null)
        {
            validationMessage = "Please select a file to upload.";
            validationMessageClass = "alert-danger";
            return;
        }

        var maxAllowedSize = 1024 * 1024; // 1MB
        using var stream = selectedFile.OpenReadStream(maxAllowedSize);
        using var reader = new StreamReader(stream);
        var content = await reader.ReadToEndAsync();
        var lines = content.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);

        await DatasetService.ProcessDatasetAsync(lines.ToList(), datasetName);
    }

    private void HandleUploadingStateChanged(object? sender, EventArgs e)
    {
        if (!JobStateService.Uploading)
        {
            validationMessage = "Dataset uploaded successfully.";
            validationMessageClass = "alert-info";
        }
        _ = InvokeAsync(StateHasChanged);
    }
}